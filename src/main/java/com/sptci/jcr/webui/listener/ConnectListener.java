package com.sptci.jcr.webui.listener;

import com.sptci.echo.ErrorPane;
import com.sptci.echo.Listener;
import com.sptci.jcr.SessionManager;
import com.sptci.jcr.webui.LoginDialog;
import com.sptci.jcr.webui.LoginJNDIDialog;
import com.sptci.jcr.webui.LoginLocalDialog;
import com.sptci.jcr.webui.LoginRMIDialog;
import com.sptci.jcr.webui.ResourceDialog;

import nextapp.echo.app.event.ActionEvent;

import static com.sptci.echo.Configuration.getString;
import static com.sptci.jcr.webui.MainController.getController;

import javax.jcr.Credentials;
import javax.jcr.RepositoryException;
import javax.jcr.Session;
import javax.jcr.SimpleCredentials;

import java.io.IOException;

/**
 * The action listener used to open a session to the JCR repository
 * selected by the user in {@link com.sptci.jcr.webui.LoginLocalDialog}.
 *
 * <p>&copy; Copyright 2009 <a href='http://sptci.com/' target='_top'>Sans
 * Pareil Technologies, Inc.</a></p>
 *
 * @author Rakesh Vidyadharan 2009-06-25
 * @version $Id: ConnectListener.java 73 2011-11-04 17:23:50Z orair $
 */
public class ConnectListener extends Listener<LoginDialog>
{
  private static final long serialVersionUID = 1L;

  /**
   * Login to the repository using the information in {@link com.sptci.jcr.webui.LocalDialog}.
   * <p>
   * For each different {@link com.sptci.jcr.webui.LocalDialog} a different operation is done.<br>
   * </p>
   * 
   * @see #login
   * @see #logout
   * @param event The event that was generated by user interaction.
   */
  public void actionPerformed( final ActionEvent event )
  {
    final LoginDialog dialog = getView( event );
    process( dialog );
  }

  void process( final LoginDialog dialog )
  {
    if ( checkView( dialog ) )
    {
      try
      {
        logout();
        Session session = null;

        if ( dialog instanceof LoginLocalDialog )
        {
          session = login( (LoginLocalDialog) dialog );
        }
        if ( dialog instanceof LoginRMIDialog )
        {
          session = login( (LoginRMIDialog) dialog );
        }
        else if ( dialog instanceof LoginJNDIDialog )
        {
          session = login( (LoginJNDIDialog) dialog );
        }
        else if ( dialog instanceof ResourceDialog )
        {
          session = login( (ResourceDialog) dialog );
        }

        getController().setSession( session );

        saveCredentials( dialog );
        dialog.userClose();
        dialog.dispose();
      }
      catch ( Throwable t )
      {
        processFatalException( t );
      }
    }
    else
    {
      final ErrorPane pane = new ErrorPane(
          getString( dialog, "error.title" ),
          getString( dialog, "error.message" ) );
      getApplication().addPane( pane );
    }
  }

  private void saveCredentials( final LoginDialog dialog )
  {
    final Credentials credentials = new SimpleCredentials(
        dialog.getUser(), dialog.getPassword().toCharArray() );
    getApplication().setProperty( Credentials.class.getName(), credentials );
  }

  private Session login( final ResourceDialog dialog )
  {
    return new SessionManager().getSession(
        dialog.getResource(), 
        dialog.getUser(), dialog.getPassword() );
  }

  private Session login( final LoginLocalDialog dialog )
      throws RepositoryException, IOException
  {
    return new SessionManager().getSession(
        dialog.getFile(), dialog.getDirectory(),
        dialog.getUser(), dialog.getPassword() );
  }

  private Session login( final LoginRMIDialog dialog )
      throws RepositoryException, IOException
  {
    return new SessionManager().getRemoteSession(
        dialog.getUrl(), dialog.getUser(), dialog.getPassword() );
  }

  private Session login( final LoginJNDIDialog dialog )
  {
    return new SessionManager().getSession(
        dialog.getJndi(), dialog.getUser(), dialog.getPassword() );
  }
  
  private void logout()
  {
    final Session session = getController().getSession();
    if ( session != null ) session.logout();
  }
}
